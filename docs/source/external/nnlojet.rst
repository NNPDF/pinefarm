NNLOJET
=======

NNLOJET is a multipurpose parton-level Monte Carlo generator which can compute several different process at NNLO in QCD using the antenna subtraction method.
While at the moment the code is private, ``pinefarm`` provides an interface to autogenerate ``pinecards`` from NNPDF datasets and NNLOJET runcards from pinefarm ``pinecards``.

Generating a pinecard
---------------------

Pinecards for NNLOJET are a declarative `.yaml` representation of NNLOJET `.run` runcards.
These can be mostly autogenerated using the `autogen` command

::

   pinefarm autogen <dataset name>


Where dataset name is one of the datasets from NNPDF, e.g., ``LHCB_Z0_8TEV_MUON_Y``.
This will generate a new folder with a template in the ``paths::pinecards`` folder (as defined in the ``pinefarm.toml`` file), named ``NNLOJET_<dataset name>``.

This folder contains two files, a ``.yaml`` file, which defines the run, and a ``metadata.txt`` file which ``pinefarm`` will use to add extra key-value pairs to the final grids.


Running with NNLOJET
--------------------

The most common use-case of NNLOJET is the generation of NNLO grids, for which running in a cluster is necessary.
Job management is beyond the scope of ``pinefarm``, therefore the ``run`` command will only go through the preparatory steps
to set up the NNLOJET runcard which can be submitted using the official NNLOJET workflow: `dokan <https://github.com/aykhuss/dokan>`,
or manually (if that's your thing).


::

    pinefarm run <pinecard name> <theory>


Where theory must be a yaml file defining the parameters of the theory, e.g., `this one <https://github.com/NNPDF/pinefarm/blob/main/extras/theories/theory_nnlo.yaml>`.

This last command will create a folder in the ``paths::results`` folder named ``<theory ID>_<dataset>_<timestamp>``, with the order by order breakdown of the calculation as defined in the original pinecard.

.. note::

   Pinefarm will default to a LO - (R V) - (RR RV VV) breakdown for a NNLO calculation. However, it might benefitial to use a custom breakdown of channels. This is done automatically by ``dokan`` which only requires one of the runcards as input.
