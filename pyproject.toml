[tool.poetry]
name = "pinefarm"
version = "0.0.0"
description = "Generate PineAPPL grids from PineCards."
authors = [
  "Alessandro Candido <candido.ale@gmail.com>",
  "Juan Cruz Martinez <juacrumar@lairen.eu>",
  "Felix Hekhorn <felix.hekhorn@mi.infn.it>",
  "Christopher Schwan <handgranaten-herbert@posteo.de>",
]
readme = "README.md"
classifiers = [
  "Programming Language :: Python :: 3",
  "Topic :: Scientific/Engineering :: Physics",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
]
repository = "https://github.com/NNPDF/runcards"
packages = [{ include = "pinefarm", from = "src" }]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.1.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry.dependencies]
python = "^3.9"
click = "^8.0.1"
rich = "^12.5.1"
PyYAML = "^6.0.0"
pandas = ">1.4"
lz4 = "^4.0.2"
pkgconfig = "^1.5.5"
pygit2 = "^1.12.0"
requests = "^2.26.0"
lhapdf-management = "^0.3"
pineappl = "^0.7.2"
more-itertools = "^8.10.0"
appdirs = "^1.4.4"
tomli = "^2.0.1"
yadism = { extras = ["box"], version = "^0.13.3", optional=true, markers = "python_version < '3.13'" }
eko = { extras = ["box"], version = "^0.14.2", optional=true, markers = "python_version < '3.13'" }
nnpdf = { git = "https://github.com/NNPDF/nnpdf", optional = true, markers = "python_version > '3.8'" }

[tool.poetry.extras]
dis = ["yadism"]
vrap = ["eko"]
nnpdf = ["nnpdf"]
constraints = ["dis", "vrap"] # integrability + positivity
complete = ["yadism", "eko", "nnpdf"]

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
Sphinx = "^4.2.0"
sphinx-rtd-theme = "^1.0.0"
sphinxcontrib-bibtex = "^2.4.1"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.1.3"
pytest-cov = "^4.0.0"
pylint = "^3.1.0"

[tool.poetry.scripts]
pinefarm = "pinefarm:command"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
dirty = true

[tool.poetry-dynamic-versioning.substitution]
files = ["pinefarm/__init__.py"]

[tool.poe.tasks]
test = "pytest"
coverage = "$BROWSER htmlcov/index.html"
test-cov = ["test", "coverage"]
lint = "pylint pinefarm -E"
lint-warnings = "pylint pinefarm --exit-zero"
ipy = "ipython"
test-mg5 = "pinefarm run TEST_RUN_SH theories/theory_213.yaml"
test-yad = "pinefarm run HERA_CC_318GEV_EM_SIGMARED theories/theory_213.yaml"
docs = { "shell" = "cd docs; make html" }
docs-server = { "shell" = "cd docs; make server" }
docs-view = { "shell" = "cd docs; make view" }
docs-clean = { "shell" = "cd docs; make clean" }
docs-cleanall = { "shell" = "cd docs; make cleanall" }

[tool.pytest.ini_options]
testpaths = ['tests/', 'benchmarks/']
python_files = ['test_*.py', 'benchmark_*.py']
python_classes = ['Test*', 'Benchmark*']
python_functions = ['test_*', 'benchmark_*']
addopts = [
  '--cov=pinefarm',
  '--cov-report=html',
  '--cov-report=xml',
  '--strict-markers',
]

[tool.pylint.master]
extension-pkg-whitelist = ["numpy", "lhapdf", "pygit2"]
ignore-paths = ["benchmarks/", "doc/", "tests/"]

[tool.pylint.messages_control]
disable = ["invalid-name", "fixme"]

[tool.pylint.reports]
output-format = "colorized"

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 10

[tool.pydocstyle]
add_ignore = ['D401', 'D107', 'D105']
